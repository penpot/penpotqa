name: 'Generate and Upload Reports'
description: 'Download existing reports, prepare history and upload to GitHub Pages'

inputs:
  browser-name:
    description: 'Browser name for the report'
    required: true
  artifact-name:
    description: 'Name for the artifact upload'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Download existing reports
      if: always()
      continue-on-error: true
      shell: bash
      run: |
        # Try to download existing reports from GitHub Pages
        echo "Attempting to download existing reports..."
        mkdir -p temp_existing
        cd temp_existing

        # Download using wget recursively with limits
        wget --recursive --no-parent --reject="index.html*" --level=3 --no-host-directories \
             --cut-dirs=1 --timeout=10 --tries=2 \
             "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/" || true

        # Move existing reports if we found them
        if [ -d "reports" ]; then
          echo "Found existing reports, preserving them..."
          mkdir -p ../history
          mv reports ../history/
        fi
        cd ..
        rm -rf temp_existing

    - name: Prepare history folder
      if: always()
      shell: bash
      run: |
        # Create base structure
        mkdir -p history/reports/run-${{ github.run_id }}
        cp -r playwright-report/* history/reports/run-${{ github.run_id }}/

        DATE_TIME=$(date -u +"%Y-%m-%d %H:%M UTC")
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        BRANCH_NAME="${{ github.ref_name }}"
        WORKFLOW_NAME="${{ github.workflow }}"
        SUCCESS_PERCENT="N/A"
        SUCCESS_CLASS="success-medium"
        # Try to get success percent if testResults.json exists
        if [ -f "testResults.json" ]; then
          SUCCESS_PERCENT=$(node -e "try { const results = JSON.parse(require('fs').readFileSync('testResults.json', 'utf8')); console.log(Math.round(results.PercentPassed || 0) + '%'); } catch(e) { console.log('N/A'); }")
          if [ "$SUCCESS_PERCENT" != "N/A" ]; then
            PERCENT_NUM=$(echo $SUCCESS_PERCENT | sed 's/%//')
            if [ "$PERCENT_NUM" -ge 90 ]; then
              SUCCESS_CLASS="success-high"
            elif [ "$PERCENT_NUM" -ge 30 ]; then
              SUCCESS_CLASS="success-medium"
            else
              SUCCESS_CLASS="success-low"
            fi
          fi
        fi

        # Copy the HTML template
        cp .github/html-template.html history/index.html

        # Detect browser icon and name
        BROWSER_ICON="üåê"
        BROWSER_LABEL="Chrome"
        if [ "${{ inputs.browser-name }}" = "Firefox" ]; then
          BROWSER_ICON="ü¶ä"
          BROWSER_LABEL="Firefox"
        fi
        # Ajustar nombre de workflow para los jobs
        if [[ "$WORKFLOW_NAME" =~ firefox|Firefox ]]; then
          WORKFLOW_LABEL="PRE_daily_firefox"
        else
          WORKFLOW_LABEL="PRE_daily"
        fi

        # Create the new row with data-labels for responsive
        NEW_ROW="<tr>"
        NEW_ROW+="<td class=\"success-rate $SUCCESS_CLASS\" data-label=\"üìä Success %\">$SUCCESS_PERCENT</td>"
        NEW_ROW+="<td class=\"workflow\" data-label=\"üîÑ Workflow\">$WORKFLOW_LABEL</td>"
        NEW_ROW+="<td class=\"commit\" data-label=\"üìù Commit\"><a href=\"https://github.com/${{ github.repository }}/commit/${{ github.sha }}\">$SHORT_SHA</a></td>"
        NEW_ROW+="<td class=\"date\" data-label=\"üìÖ Date\">$DATE_TIME</td>"
        NEW_ROW+="<td class=\"branch\" data-label=\"üåø Branch\">$BRANCH_NAME</td>"
        NEW_ROW+="<td class=\"browser\" data-label=\"üåê Browser\"><span title=\"$BROWSER_LABEL\">$BROWSER_ICON $BROWSER_LABEL</span></td>"
        NEW_ROW+="<td data-label=\"üìä Report\"><a href=\"reports/run-${{ github.run_id }}/index.html\">üîç View Report</a></td>"
        NEW_ROW+="</tr>"

        # Prepare all rows (new one + existing ones)
        ROWS_CONTENT="$NEW_ROW"

        # Try to get existing runs data from the old HTML if it exists
        if curl -s -f "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html" -o existing_index.html; then
          echo "Found existing index.html, extracting existing runs..."
          # Extract existing runs and add them (limit to 49 to keep 50 total)
          EXISTING_ROWS=$(grep "<tr>" existing_index.html | head -49 | tr '\n' ' ' || true)
          ROWS_CONTENT="$NEW_ROW $EXISTING_ROWS"
        fi

        # Replace placeholder with actual rows
        sed "s|<!-- ROWS_PLACEHOLDER -->|$ROWS_CONTENT|" history/index.html > temp_index.html
        mv temp_index.html history/index.html

        # Remove old run folders (keep latest 50)
        if [ -d history/reports ]; then
          ls -dt history/reports/run-* 2>/dev/null | tail -n +51 | xargs -r rm -rf
        fi

    - name: Upload report to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: history

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ inputs.artifact-name }}
        path: playwright-report/
        retention-days: 30
