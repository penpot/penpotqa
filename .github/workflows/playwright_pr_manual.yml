name: Manual Penpot Tests for PR

on:
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all tests regardless of changes'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  tests_chromium:
    defaults:
      run:
        shell: bash
    environment: PRE
    timeout-minutes: 280
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        id: run-tests
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          LOGIN_EMAIL: ${{ secrets.SECOND_EMAIL }}
          SECOND_EMAIL: ${{ secrets.LOGIN_EMAIL }}
          LOGIN_PWD: ${{ secrets.LOGIN_PWD }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          GMAIL_NAME: ${{ secrets.GMAIL_NAME }}
          STRIPE_SK: ${{ secrets.STRIPE_SK }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.run_all_tests }}" = "true" ]; then
            echo "Running all tests..."
            npx playwright test tests/login.spec.js --project=chrome --reporter=html -gv 'PERF'
          else
            echo "Running tests for changed files using Playwright's --only-changed"
            npx playwright test --project=chrome --only-changed=origin/main --reporter=html -gv 'PERF'
          fi

      # Save the report
      - name: Prepare history folder
        if: always()
        run: |
          mkdir -p history/reports/run-${{ github.run_id }}
          cp -r playwright-report/* history/reports/run-${{ github.run_id }}/

          DATE_TIME=$(date -u +"%Y-%m-%d %H:%M UTC")
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          # Create index.html if it doesn't exist.
          if [ ! -f history/index.html ]; then
            echo "<html><head><title>Playwright Test Reports</title></head><body><h1>Playwright Test Reports</h1>" > history/index.html
            echo "<table border='1' cellpadding='5' cellspacing='0'>" >> history/index.html
            echo "<tr><th>Run ID</th><th>Commit</th><th>Date</th></tr>" >> history/index.html
            echo "</table></body></html>" >> history/index.html
          fi

          # Insert new row right after the table header
          sed -i "s|<tr><th>Run ID</th><th>Commit</th><th>Date</th></tr>|<tr><th>Run ID</th><th>Commit</th><th>Date</th></tr>\n<tr><td><a href='reports/run-${{ github.run_id }}/index.html'>${{ github.run_id }}</a></td><td><a href='https://github.com/${{ github.repository }}/commit/${{ github.sha }}'>${SHORT_SHA}</a></td><td>${DATE_TIME}</td></tr>|" history/index.html

          # Keep only the latest 20 runs (remove old rows)
          ROW_COUNT=$(grep -c "<tr><td>" history/index.html || true)
          if [ "$ROW_COUNT" -gt 20 ]; then
            EXTRA=$((ROW_COUNT - 20))
            # remove the oldest rows (at the end of the table)
            tac history/index.html | sed "0,/<tr><td>/s//REMOVEMARK/" | tac | sed "/REMOVEMARK/,+$EXTRA d" > tmp_index.html
            mv tmp_index.html history/index.html
          fi

          # Remove old run folders (keep latest 20)
          ls -dt history/reports/run-* | tail -n +21 | xargs -r rm -rf

      - name: Upload report to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: history

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-chromium-pr
          path: playwright-report/
          retention-days: 30

      - name: Send mattermost Message
        env:
          CHANNEL_ID: ${{ secrets.PR_CHANNEL_ID }}
          LOGIN_ID_MATTERMOST: ${{ secrets.LOGIN_ID_MATTERMOST }}
          PASSWORD_MATTERMOST: ${{ secrets.PASSWORD_MATTERMOST }}
        if: always()
        run: npx ts-node -e "require('./helpers/mattermost.helper.js').sendMessage('Chrome')"

  deploy:
    needs: tests_chromium
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
