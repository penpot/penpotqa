name: 'Switch to HTTPS URLs'

on:
  workflow_dispatch:
    inputs:
      new_https_url:
        description: 'New HTTPS base URL (e.g., https://qa-reports.penpot.app)'
        required: true
        default: 'https://qa-reports.penpot.app'
        type: string
      test_before_switch:
        description: 'Test the new URL before switching'
        required: true
        default: true
        type: boolean

jobs:
  switch-to-https:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate new HTTPS URL
        if: ${{ inputs.test_before_switch }}
        run: |
          echo "üß™ Testing new HTTPS URL: ${{ inputs.new_https_url }}"

          # Test if URL is reachable
          if curl -sL --max-time 10 --fail "${{ inputs.new_https_url }}" >/dev/null; then
            echo "‚úÖ URL is reachable"
          else
            echo "‚ùå URL is not reachable or returns error"
            echo "Please check:"
            echo "1. DNS configuration is correct"
            echo "2. CloudFront distribution is deployed"
            echo "3. SSL certificate is validated"
            exit 1
          fi

          # Test SSL certificate
          echo "üîê Checking SSL certificate..."
          SSL_INFO=$(curl -sI --max-time 10 "${{ inputs.new_https_url }}" | grep -i "HTTP\|server\|date" || true)
          echo "$SSL_INFO"

          # Test if it redirects HTTP to HTTPS
          echo "üîÑ Testing HTTP to HTTPS redirect..."
          HTTP_URL=$(echo "${{ inputs.new_https_url }}" | sed 's/https:/http:/')
          REDIRECT_TEST=$(curl -sI --max-time 10 "$HTTP_URL" | grep -i "location\|301\|302" || true)
          if [ -n "$REDIRECT_TEST" ]; then
            echo "‚úÖ HTTP to HTTPS redirect is working"
            echo "$REDIRECT_TEST"
          else
            echo "‚ö†Ô∏è  HTTP to HTTPS redirect might not be configured"
          fi

      - name: Update URLs in action.yml
        run: |
          echo "üîÑ Updating URLs in GitHub Action..."

          # Backup original file
          cp .github/actions/upload-reports/action.yml .github/actions/upload-reports/action.yml.backup

          # Get base URL without trailing slash
          BASE_URL=$(echo "${{ inputs.new_https_url }}" | sed 's|/$||')

          # Update the URLs in action.yml
          sed -i "s|http://kaleidos-qa-reports.s3-website.eu-west-1.amazonaws.com|$BASE_URL|g" .github/actions/upload-reports/action.yml

          echo "‚úÖ URLs updated in action.yml"

          # Show diff
          echo "üìã Changes made:"
          diff .github/actions/upload-reports/action.yml.backup .github/actions/upload-reports/action.yml || true

      - name: Update URLs in any documentation or config files
        run: |
          echo "üîç Searching for other files that might need URL updates..."

          # Search for the old URL in all files
          OLD_PATTERN="http://kaleidos-qa-reports.s3-website.eu-west-1.amazonaws.com"
          BASE_URL=$(echo "${{ inputs.new_https_url }}" | sed 's|/$||')

          # Find files containing the old URL
          FILES_WITH_OLD_URL=$(grep -r -l "$OLD_PATTERN" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.backup" 2>/dev/null || true)

          if [ -n "$FILES_WITH_OLD_URL" ]; then
            echo "üìù Found files with old URLs:"
            echo "$FILES_WITH_OLD_URL"
            
            # Update each file
            for file in $FILES_WITH_OLD_URL; do
              echo "Updating: $file"
              sed -i "s|$OLD_PATTERN|$BASE_URL|g" "$file"
            done
            
            echo "‚úÖ All URLs updated"
          else
            echo "‚úÖ No additional files found with old URLs"
          fi

      - name: Verify changes
        run: |
          echo "üîç Verifying all changes..."

          # Check if any old URLs remain
          OLD_PATTERN="http://kaleidos-qa-reports.s3-website.eu-west-1.amazonaws.com"
          REMAINING=$(grep -r "$OLD_PATTERN" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.backup" 2>/dev/null || true)

          if [ -n "$REMAINING" ]; then
            echo "‚ö†Ô∏è  Warning: Some old URLs might still exist:"
            echo "$REMAINING"
          else
            echo "‚úÖ All old URLs have been replaced"
          fi

          # Show files that were modified
          echo ""
          echo "üìã Modified files:"
          git status --porcelain

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Switch QA reports to HTTPS URLs'
          title: 'üîí Switch QA reports to HTTPS URLs'
          body: |
            ## üîí Switch QA Reports to HTTPS

            This PR updates all QA report URLs from HTTP to HTTPS.

            ### Changes Made:
            - ‚úÖ Updated GitHub Action URLs in `.github/actions/upload-reports/action.yml`
            - ‚úÖ Replaced `http://kaleidos-qa-reports.s3-website.eu-west-1.amazonaws.com` 
            - ‚úÖ New URL: `${{ inputs.new_https_url }}`

            ### Infrastructure Requirements:
            - ‚úÖ CloudFront distribution deployed
            - ‚úÖ SSL certificate validated
            - ‚úÖ DNS configured
            - ‚úÖ HTTPS URL tested and working

            ### Testing:
            - [ ] Merge this PR
            - [ ] Run a test workflow to verify reports upload correctly
            - [ ] Verify HTTPS URLs work in generated reports

            **New report URL format**: `${{ inputs.new_https_url }}/run-{run-id}/index.html`

            ---

            Generated automatically by the "Switch to HTTPS URLs" workflow.
          branch: feature/switch-to-https-urls
          delete-branch: true

      - name: Summary
        run: |
          echo "‚úÖ HTTPS URL switch completed!"
          echo ""
          echo "üìã What happened:"
          echo "- URLs updated in GitHub Actions"
          echo "- Pull Request created for review"
          echo "- Old URLs backed up (*.backup files)"
          echo ""
          echo "üîÑ Next steps:"
          echo "1. Review and merge the Pull Request"
          echo "2. Test the next QA report run"
          echo "3. Verify HTTPS is working correctly"
          echo ""
          echo "üåê New report URL: ${{ inputs.new_https_url }}"
