name: 'Setup HTTPS Infrastructure for QA Reports'

on:
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'Custom domain name for the reports (e.g., qa-reports.penpot.app)'
        required: true
        default: 'qa-reports.penpot.app'
        type: string
      dry_run:
        description: 'Dry run - only show what would be created (true/false)'
        required: true
        default: true
        type: boolean
      action_type:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - update
          - destroy
          - status

env:
  AWS_REGION: eu-west-1
  S3_BUCKET: kaleidos-qa-reports

jobs:
  setup-https:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CLI and tools
        run: |
          # AWS CLI ya está instalado en GitHub Actions runners
          aws --version

          # Instalar jq para manipular JSON
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate inputs and check current setup
        run: |
          echo "🔍 Checking current infrastructure..."
          echo "Domain: ${{ inputs.domain_name }}"
          echo "Action: ${{ inputs.action_type }}"
          echo "Dry run: ${{ inputs.dry_run }}"

          # Verificar que el bucket S3 existe
          if aws s3 ls s3://${{ env.S3_BUCKET }} >/dev/null 2>&1; then
            echo "✅ S3 bucket ${{ env.S3_BUCKET }} exists"
          else
            echo "❌ S3 bucket ${{ env.S3_BUCKET }} not found"
            exit 1
          fi

          # Verificar distribuciones de CloudFront existentes
          echo "📋 Checking existing CloudFront distributions..."
          aws cloudfront list-distributions --query 'DistributionList.Items[?Comment==`Penpot QA Reports HTTPS Distribution`].[Id,DomainName,Status]' --output table || true

      - name: Create SSL Certificate (if needed)
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' }}
        run: |
          echo "🔐 Setting up SSL certificate for ${{ inputs.domain_name }}..."

          # Cambiar a us-east-1 para CloudFront
          export AWS_DEFAULT_REGION=us-east-1

          # Verificar si ya existe un certificado
          EXISTING_CERT=$(aws acm list-certificates \
            --query "CertificateSummaryList[?DomainName=='${{ inputs.domain_name }}'].CertificateArn" \
            --output text \
            --region us-east-1 || echo "")

          if [ -n "$EXISTING_CERT" ] && [ "$EXISTING_CERT" != "None" ]; then
            echo "✅ Certificate already exists: $EXISTING_CERT"
            echo "CERTIFICATE_ARN=$EXISTING_CERT" >> $GITHUB_ENV
          else
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "🔄 [DRY RUN] Would create SSL certificate for ${{ inputs.domain_name }}"
              echo "CERTIFICATE_ARN=arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012" >> $GITHUB_ENV
            else
              echo "🔄 Creating SSL certificate..."
              CERT_ARN=$(aws acm request-certificate \
                --domain-name "${{ inputs.domain_name }}" \
                --validation-method DNS \
                --region us-east-1 \
                --query 'CertificateArn' \
                --output text)
              
              echo "✅ Certificate requested: $CERT_ARN"
              echo "CERTIFICATE_ARN=$CERT_ARN" >> $GITHUB_ENV
              
              echo "⚠️  IMPORTANT: You need to validate this certificate via DNS:"
              echo "   1. Go to AWS Certificate Manager console"
              echo "   2. Find certificate: $CERT_ARN"
              echo "   3. Add the DNS validation records to your domain"
              echo "   4. Wait for validation (can take up to 30 minutes)"
            fi
          fi

      - name: Create Origin Access Identity
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' }}
        run: |
          echo "🔑 Setting up Origin Access Identity..."

          # Verificar si ya existe
          EXISTING_OAI=$(aws cloudfront list-cloud-front-origin-access-identities \
            --query "CloudFrontOriginAccessIdentityList.Items[?Comment=='OAI for Penpot QA Reports'].Id" \
            --output text || echo "")

          if [ -n "$EXISTING_OAI" ] && [ "$EXISTING_OAI" != "None" ]; then
            echo "✅ Origin Access Identity already exists: $EXISTING_OAI"
            echo "OAI_ID=$EXISTING_OAI" >> $GITHUB_ENV
          else
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "🔄 [DRY RUN] Would create Origin Access Identity"
              echo "OAI_ID=E1234567890123" >> $GITHUB_ENV
            else
              echo "🔄 Creating Origin Access Identity..."
              OAI_RESPONSE=$(aws cloudfront create-cloud-front-origin-access-identity \
                --cloud-front-origin-access-identity-config CallerReference=$(date +%s),Comment="OAI for Penpot QA Reports")
              
              OAI_ID=$(echo "$OAI_RESPONSE" | jq -r '.CloudFrontOriginAccessIdentity.Id')
              echo "✅ Origin Access Identity created: $OAI_ID"
              echo "OAI_ID=$OAI_ID" >> $GITHUB_ENV
            fi
          fi

      - name: Update S3 Bucket Policy
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' }}
        run: |
          echo "📝 Updating S3 bucket policy..."

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔄 [DRY RUN] Would update S3 bucket policy for CloudFront access"
            echo "Policy would allow OAI: $OAI_ID"
          else
            # Obtener el ARN del OAI
            OAI_ARN="arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity $OAI_ID"
            
            # Crear la política del bucket
            cat > bucket-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontAccess",
                "Effect": "Allow",
                "Principal": {
                  "AWS": "$OAI_ARN"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ env.S3_BUCKET }}/*"
              }
            ]
          }
          EOF
            
            echo "🔄 Applying bucket policy..."
            aws s3api put-bucket-policy \
              --bucket ${{ env.S3_BUCKET }} \
              --policy file://bucket-policy.json
            
            echo "✅ S3 bucket policy updated"
          fi

      - name: Create CloudFront Distribution
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' }}
        run: |
          echo "🌐 Setting up CloudFront distribution..."

          # Verificar si ya existe
          EXISTING_DIST=$(aws cloudfront list-distributions \
            --query 'DistributionList.Items[?Comment==`Penpot QA Reports HTTPS Distribution`].Id' \
            --output text || echo "")

          if [ -n "$EXISTING_DIST" ] && [ "$EXISTING_DIST" != "None" ]; then
            echo "✅ CloudFront distribution already exists: $EXISTING_DIST"
            DIST_DOMAIN=$(aws cloudfront get-distribution --id "$EXISTING_DIST" \
              --query 'Distribution.DomainName' --output text)
            echo "CLOUDFRONT_DOMAIN=$DIST_DOMAIN" >> $GITHUB_ENV
            echo "DISTRIBUTION_ID=$EXISTING_DIST" >> $GITHUB_ENV
          else
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "🔄 [DRY RUN] Would create CloudFront distribution with:"
              echo "  - Origin: ${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com"
              echo "  - Custom domain: ${{ inputs.domain_name }}"
              echo "  - SSL Certificate: $CERTIFICATE_ARN"
              echo "  - Origin Access Identity: $OAI_ID"
              echo "CLOUDFRONT_DOMAIN=d1234567890123.cloudfront.net" >> $GITHUB_ENV
              echo "DISTRIBUTION_ID=E1234567890123" >> $GITHUB_ENV
            else
              # Crear configuración de la distribución
              cat > distribution-config.json << EOF
          {
            "CallerReference": "penpot-qa-reports-$(date +%s)",
            "Comment": "Penpot QA Reports HTTPS Distribution",
            "DefaultRootObject": "index.html",
            "Origins": {
              "Quantity": 1,
              "Items": [
                {
                  "Id": "S3-${{ env.S3_BUCKET }}",
                  "DomainName": "${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com",
                  "S3OriginConfig": {
                    "OriginAccessIdentity": "origin-access-identity/cloudfront/$OAI_ID"
                  }
                }
              ]
            },
            "DefaultCacheBehavior": {
              "TargetOriginId": "S3-${{ env.S3_BUCKET }}",
              "ViewerProtocolPolicy": "redirect-to-https",
              "TrustedSigners": {
                "Enabled": false,
                "Quantity": 0
              },
              "ForwardedValues": {
                "QueryString": false,
                "Cookies": {
                  "Forward": "none"
                }
              },
              "MinTTL": 0,
              "DefaultTTL": 3600,
              "MaxTTL": 86400
            },
            "Enabled": true,
            "PriceClass": "PriceClass_100"
          }
          EOF
              
              # Si tenemos certificado validado, agregarlo
              if [ -n "$CERTIFICATE_ARN" ]; then
                cat > distribution-config-with-ssl.json << EOF
          {
            "CallerReference": "penpot-qa-reports-$(date +%s)",
            "Comment": "Penpot QA Reports HTTPS Distribution",
            "DefaultRootObject": "index.html",
            "Aliases": {
              "Quantity": 1,
              "Items": ["${{ inputs.domain_name }}"]
            },
            "Origins": {
              "Quantity": 1,
              "Items": [
                {
                  "Id": "S3-${{ env.S3_BUCKET }}",
                  "DomainName": "${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com",
                  "S3OriginConfig": {
                    "OriginAccessIdentity": "origin-access-identity/cloudfront/$OAI_ID"
                  }
                }
              ]
            },
            "DefaultCacheBehavior": {
              "TargetOriginId": "S3-${{ env.S3_BUCKET }}",
              "ViewerProtocolPolicy": "redirect-to-https",
              "TrustedSigners": {
                "Enabled": false,
                "Quantity": 0
              },
              "ForwardedValues": {
                "QueryString": false,
                "Cookies": {
                  "Forward": "none"
                }
              },
              "MinTTL": 0,
              "DefaultTTL": 3600,
              "MaxTTL": 86400
            },
            "ViewerCertificate": {
              "ACMCertificateArn": "$CERTIFICATE_ARN",
              "SSLSupportMethod": "sni-only",
              "MinimumProtocolVersion": "TLSv1.2_2021"
            },
            "Enabled": true,
            "PriceClass": "PriceClass_100"
          }
          EOF
                CONFIG_FILE="distribution-config-with-ssl.json"
              else
                CONFIG_FILE="distribution-config.json"
              fi
              
              echo "🔄 Creating CloudFront distribution..."
              DIST_RESPONSE=$(aws cloudfront create-distribution \
                --distribution-config file://$CONFIG_FILE)
              
              DIST_ID=$(echo "$DIST_RESPONSE" | jq -r '.Distribution.Id')
              DIST_DOMAIN=$(echo "$DIST_RESPONSE" | jq -r '.Distribution.DomainName')
              
              echo "✅ CloudFront distribution created:"
              echo "  - Distribution ID: $DIST_ID"
              echo "  - Domain: $DIST_DOMAIN"
              
              echo "CLOUDFRONT_DOMAIN=$DIST_DOMAIN" >> $GITHUB_ENV
              echo "DISTRIBUTION_ID=$DIST_ID" >> $GITHUB_ENV
            fi
          fi

      - name: Show DNS Configuration
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' }}
        run: |
          echo "📋 DNS Configuration Required:"
          echo "================================"
          echo "To complete the setup, add this DNS record:"
          echo ""
          echo "Type: CNAME"
          echo "Name: qa-reports (or the subdomain part of ${{ inputs.domain_name }})"
          echo "Value: $CLOUDFRONT_DOMAIN"
          echo "TTL: 300 (or your preferred value)"
          echo ""
          echo "If using Route 53, you can create an A record with alias instead:"
          echo "Type: A"
          echo "Name: qa-reports"
          echo "Alias: Yes"
          echo "Target: $CLOUDFRONT_DOMAIN"
          echo ""

      - name: Test HTTPS Setup
        if: ${{ inputs.action_type == 'create' || inputs.action_type == 'update' && inputs.dry_run == false }}
        run: |
          echo "🧪 Testing HTTPS setup..."
          echo "⏳ Note: CloudFront distribution deployment can take 10-15 minutes"
          echo ""
          echo "Once DNS propagates, test these URLs:"
          echo "- https://${{ inputs.domain_name }}"
          echo "- https://$CLOUDFRONT_DOMAIN"
          echo ""
          echo "🔄 Current distribution status:"
          aws cloudfront get-distribution --id "$DISTRIBUTION_ID" \
            --query 'Distribution.Status' --output text

      - name: Show Infrastructure Status
        if: ${{ inputs.action_type == 'status' }}
        run: |
          echo "📊 Current Infrastructure Status:"
          echo "================================"

          echo "🪣 S3 Bucket:"
          aws s3 ls s3://${{ env.S3_BUCKET }} --summarize | tail -2

          echo ""
          echo "🔐 SSL Certificates (us-east-1):"
          aws acm list-certificates --region us-east-1 \
            --query 'CertificateSummaryList[?contains(DomainName, `penpot`) || contains(DomainName, `qa-reports`)].[DomainName,Status,CertificateArn]' \
            --output table

          echo ""
          echo "🌐 CloudFront Distributions:"
          aws cloudfront list-distributions \
            --query 'DistributionList.Items[?contains(Comment, `Penpot`)].[Id,DomainName,Status,Comment]' \
            --output table

          echo ""
          echo "🔑 Origin Access Identities:"
          aws cloudfront list-cloud-front-origin-access-identities \
            --query 'CloudFrontOriginAccessIdentityList.Items[?contains(Comment, `Penpot`)].[Id,Comment]' \
            --output table

      - name: Cleanup Resources (Destroy)
        if: ${{ inputs.action_type == 'destroy' }}
        run: |
          echo "🗑️  Destroying HTTPS infrastructure..."
          echo "⚠️  WARNING: This will remove the CloudFront distribution and SSL certificate"

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔄 [DRY RUN] Would destroy:"
            echo "  - CloudFront distributions with 'Penpot QA Reports' comment"
            echo "  - SSL certificates for ${{ inputs.domain_name }}"
            echo "  - Origin Access Identities for Penpot QA Reports"
          else
            echo "🔄 This feature will be implemented if needed"
            echo "For safety, manual deletion through AWS Console is recommended"
          fi

      - name: Summary
        run: |
          echo "✅ Action completed: ${{ inputs.action_type }}"
          echo ""
          if [ "${{ inputs.action_type }}" = "create" ] || [ "${{ inputs.action_type }}" = "update" ]; then
            echo "📋 Next Steps:"
            echo "1. Wait for SSL certificate validation (if new)"
            echo "2. Add DNS record pointing to: $CLOUDFRONT_DOMAIN"
            echo "3. Wait for CloudFront deployment (10-15 minutes)"
            echo "4. Test the new HTTPS URL: https://${{ inputs.domain_name }}"
            echo "5. Update the GitHub Actions to use the new HTTPS URLs"
          fi
