name: Setup S3 Static Website

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  setup-s3:
    runs-on: ubuntu-latest
    environment: PRE # Para acceder a los secrets de AWS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup S3 Static Website
        run: |
          BUCKET_NAME="kaleidos-qa-reports"
          REGION="eu-west-1"

          echo "üöÄ Configuring S3 bucket for static website hosting..."

          # 1. Enable Static Website Hosting
          echo "üìù Step 1: Enabling static website hosting..."
          aws s3 website s3://$BUCKET_NAME \
            --index-document index.html \
            --error-document error.html

          # 2. Disable Block Public Access
          echo "üîì Step 2: Disabling block public access..."
          aws s3api put-public-access-block \
            --bucket $BUCKET_NAME \
            --public-access-block-configuration \
            BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false

          # 3. Apply bucket policy for public read access
          echo "üìã Step 3: Applying bucket policy..."
          cat > bucket-policy.json << 'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::kaleidos-qa-reports/*"
              }
            ]
          }
          EOF

          aws s3api put-bucket-policy \
            --bucket $BUCKET_NAME \
            --policy file://bucket-policy.json

          # 4. Create and upload error page
          echo "üìÑ Step 4: Creating and uploading error page..."
          cat > error.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Error - QA Reports</title>
              <style>
                  body {
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      text-align: center;
                      padding: 50px;
                      margin: 0;
                  }
                  .container {
                      max-width: 600px;
                      margin: 0 auto;
                      background: rgba(255, 255, 255, 0.1);
                      padding: 40px;
                      border-radius: 15px;
                      backdrop-filter: blur(10px);
                  }
                  h1 { font-size: 3em; margin-bottom: 20px; }
                  p { font-size: 1.2em; margin-bottom: 30px; }
                  a {
                      color: #ffd700;
                      text-decoration: none;
                      font-weight: bold;
                  }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üö® Page Not Found</h1>
                  <p>The requested page could not be found.</p>
                  <p><a href="/index.html">‚Üê Back to QA Reports Dashboard</a></p>
              </div>
          </body>
          </html>
          EOF

          aws s3 cp error.html s3://$BUCKET_NAME/error.html \
            --content-type "text/html" \
            --cache-control "max-age=3600"

          # 5. Set CORS configuration
          echo "üåê Step 5: Setting CORS configuration..."
          aws s3api put-bucket-cors \
            --bucket $BUCKET_NAME \
            --cors-configuration '{
              "CORSRules": [
                {
                  "AllowedHeaders": ["*"],
                  "AllowedMethods": ["GET", "HEAD"],
                  "AllowedOrigins": ["*"],
                  "MaxAgeSeconds": 3000
                }
              ]
            }'

          echo ""
          echo "‚úÖ Configuration complete!"
          echo ""
          echo "üåê Website URLs:"
          echo "   Dashboard: http://$BUCKET_NAME.s3-website.$REGION.amazonaws.com/"
          echo "   Reports:   http://$BUCKET_NAME.s3-website.$REGION.amazonaws.com/run-{id}/index.html"
          echo ""
          echo "üîó You can also create a CNAME record pointing to:"
          echo "   $BUCKET_NAME.s3-website.$REGION.amazonaws.com"
          echo ""
          echo "‚ö†Ô∏è  Note: It may take a few minutes for the changes to propagate."

      - name: Test website accessibility
        run: |
          echo "üß™ Testing website accessibility..."
          BUCKET_NAME="kaleidos-qa-reports"
          REGION="eu-west-1"
          WEBSITE_URL="http://$BUCKET_NAME.s3-website.$REGION.amazonaws.com"

          # Wait a moment for propagation
          sleep 10

          # Test if the website endpoint responds
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBSITE_URL" || echo "000")

          if [ "$HTTP_CODE" = "404" ] || [ "$HTTP_CODE" = "403" ]; then
            echo "‚úÖ Website endpoint is accessible (showing expected 404/403 for empty index)"
            echo "üéØ Ready to receive reports!"
          elif [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Website is fully accessible and serving content!"
          else
            echo "‚ö†Ô∏è  Website might still be propagating (HTTP $HTTP_CODE)"
            echo "üïê Try again in a few minutes: $WEBSITE_URL"
          fi
